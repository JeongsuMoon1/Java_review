package org.opentutorials.javatutorials._920_loop;

public class _2_WhileDemo {

	public static void main(String[] args) {
		
		// 하드코딩된 반복문 보다 더 높은 효용을 가지게 될려면
		// 언제까지 반복이 진행될 것이냐, 바로 그러한 정보와 반복문이 결합했을 때 반복문이 좀 더 큰 효용을 갖게 된다.
		// while문의 반복조건에 어떤 변수값을 주고 반복문이 실행되는 과정에서 조건이 변경될 수 있어야 한다.
		
		// 변수를 이용한 while문의 제어
		int i = 0;  // i값을 0으로 초기화 한다. 
		// i의 값이 10보다 작다면 true, 크다면 false가 된다.
		// 현재 i의 값은 0이기 때문에 이 반복문은 실행된다.
		while (i < 10){ // 언제까지 반복할 것인지 판단하기 위한 문법적인 로직.
			System.out.println("coding everybody" + i);
			// i의 값에 1을 더한다. 반복문의 마지막 줄에 도달하면
			// 반복문을 호출한다. 이때 i<10의 값을 검사하게 된다.
			i++; // 언제까지 반복할 것인가를 판단하는 로직.
			
			//** 코드를 언제까지 반복할 것인지에 관여하는 요소 : int i = 0; , i<10 , i++;
			// 이러한 요소들 사이에 1000줄짜리 또는 10000줄짜리 코드가 들어가 있다면, 
			// 서로의 위치가 멀어지기 때문에 코드 작성하기가 점점 어려워질 것이다. -> 이를 해결하기 위한 것이 for문이다.
			// 자주 사용하는 패턴을 문법적인 요소로 발전시킨 것.
			
			// for문을 사용하면 이런 문법적인 요소를 하나의 문법으로 응집해 놓으므로 보기에도 좋고, 관리하기도 좋은 코드를 만들 수 있다.
			// 다만, 언제나 for문이 좋은 것이 아니라
			// 초기값, 언제까지 반복할 것인지에 대한 조건, 반복할 때마다 초깃값을 변경하는 식으로 구성된 반복문이라면
			// while보다는 for문을 사용하는 것이 좋다.
		}

	}

}
