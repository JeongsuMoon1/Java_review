package org.opentutorials.javatutorials._session2_1_objectorientedprogramming;

public class _1_Theory {

	public static void main(String[] args) {
		
		// 1. 개요
		
		// 2. 추상화
		//	  현실을 단순화해서 만드는 것을 추상화라고 하며, 영어로는 abstract라고 한다. 자바에는 abstract라는 키워드가 나오고 프로그래밍하는
		//   과정에서 추상화라는 말을 많이 듣게 될 것이다. 즉, 추상화란 해결해야 할 문제 또는 반영해야 할 현실을 소프트웨어 방식으로 단순화하는 행위를 일컫는다.
		//   소프트웨어를 설계한다는 것은 복잡한 현실을 추상화하는 과정이라고 볼 수 있다.		
		
		// 3. 부품화
		//   하나의 프로그램은 여러 형태의 로직으로 구성돼 있으며, 로직을 그 로직과 관련된 변수와 메소드로 그룹화한 것이 객체라고 했다.
		//   객체가 다른 곳 또는 여러 곳에서 일종의 부품으로서 사용되는 것이다.
		//   좋은 객체를 만든다는 것은 로직을 재활용할 수 있게 부품화하는 것이라고 볼 수 있다.
		
		// 지금까지 배운 프로그래밍 기능 가운데 부품화의 특성이라고 생각할 수 있는 것이 바로 메소드이다.
		// 메소드는 프로그램 안의 여러 가지 기능 중에서 중복으로 사용되는 것을 하나의 로직으로 빼내서 재활용성을 높인 것이고, 이러한 개념은 객체지향으로 이어진다.
		// 메소드를 만들면 코드의 양을 극적으로 줄일 수 있고 메소드별로 기능이 분류돼 있으므로 필요한 코드가 있을 때, 그 메소드를 찾으면 필요한 코드를 좀 더 빠르게
		// 찾을 수 있다. 또한, 어떤 소프트웨어의 개선이 필요할 떄 메소드만 수정하면 그 메소드를 사용하고 있는 모든 곳에서 동시다발적으로 개선이 이뤄진다는 것이 부품화의 장점이다.
		// -> 이러한 것들을 한 단계 발전시킨 것이 "객체지향"이다.
		
		// 부품화한다고 해서 모든 곳에서 자신이 만든 코드를 재활용 할 수 있는 것은 아니다.
		// 그래서 재활용성을 높이고 부품으로서의 가치를 높이기 위해 여러가지 기능과 방법론이 들어가게 된다.
		
		// <은닉화, 캡슐화>
		// 내부의 동작 방법을 단단한 케이스 안(객체)에 숨기고 사용자에게는 그 부품의 사용법(메소드)만 노출하는 것을 정보 은닉화(information hiding), 또는 캡슐화(encapsulation)이라고 한다.
		// 즉, 객체가 어떻게 생격는지 몰라도 이 객체를 사용할 수 있게 하자는 것이 은닉화, 캡슐화라고 한다.
		
		// <인터페이스> -> 35장 인터페이스에서 다룰 예정.
	}

}
