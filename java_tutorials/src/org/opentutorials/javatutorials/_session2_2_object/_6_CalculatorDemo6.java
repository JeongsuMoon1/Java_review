package org.opentutorials.javatutorials._session2_2_object;

public class _6_CalculatorDemo6 {

	public static void main(String[] args) {
		
		// 05. 객체화3
		
		// Calculator는 클래스, 즉 설계도 였다.그리고 이 클래스를 new 연산자를 이용해 생성(new Calculator())하고 대입 연산자를 사용해
		// 대입 연산자 왼쪽에 c1, c2변수를 재배치했다.
		// 아래의 그림에서 보다시피 두 개의 객체가 만들어 졌는데 이러한 객체를 인스턴스(instance)라고 한다.
		
		//  [Calculator]
		//       |
		//   ㅡㅡㅡㅡㅡㅡㅡㅡ
		//   |        |
		//  C1        C2
		// left: 10  left: 20
		// right:20  right:40
		
		// 이 인스턴스는 Calculator라는 클래스의 설계도에 따라 만들어진 구체적인 제품이라고 이야기한다.
		// 각 제품은 내부적으로 변수를 가지고 있는데, c1과 c2는 동일한 클래스로  만든 제품이므로 동작하는 방법은 같지만
		// 두 객체는 각자 가지고 있는 변수가 다르다. 데이터가 다르다. 다른 말로 상태가 다른 것이다.
		
		// 객체지향 프로그래밍을 시작하는 수업에서 객체라는 것은 상태와 행위로 구성된 것이라고 정의했다.
		// 이것이 어려운 말이라고 했던 이유는 설명하기 어려운 상황이었기 때문이었다.
		// 위 그림에서 볼 수 있듯이 객체가 가지고 있는 변수가 이 객체가 갖고 있는 상태이다.
		// 그 상태를 바탕으로 이 객체에 메소드를 호출하는 것이 이 객체가 가진 행위가 되는 것이다. 즉, 객체라는 것은 상태와 행위의 집합이다.
		
		// ** 
		// Calculator c1 = new Calculator();
		// 위와 같이 앞에서 c1이라는 변수를 선언할 떄 Calculator라고 적었다. 이 말은 c1변수는 Calculator라는 객체를 담을 수 있는 '컨테이너'라는 뜻이다.
		// 다른 말로는 Calculator가 [데이터 타입]이라는 뜻이다.
		// 즉, 객체를 만든다는 것은 결과적으로 데이터 타입을 직접 만드는 것이라고도 이야기할 수 있다.
		
		// 클래스를 만든다는 것은 직접 메모리를 사용할 수 있게 되는 것이고, 그 메모리 안에는 left와 right를 위한 공간이 들어있다.
		// 그리고 setOperand() 메소드를 통해 left의 값에 20을 주고 40을 준다는 것은 컴퓨터 메모리에 20과 40이라는 값을 넣는 것과 같은 역할을 한다는 것이다.
		// 클래스를 만든다는 것은 어떻게 보면 [사용자 정의 데이터 타입]을 만드는 것이다.
		
		// 객체, 클래스, 인스턴스가 총합이 될 수 있다.
		
	}

}
